#BlueJ class context
comment0.target=Player
comment1.params=graph\ limit\ beginning\ end
comment1.target=Player(UndirectedGraph,\ int,\ int,\ java.util.ArrayList)
comment10.params=
comment10.target=boolean\ checkForExitD()
comment10.text=\n\ This\ method\ check\ for\ an\ exit\ using\ the\ Dijkstras\ shortest\ paths\ algorithm.\ \ If\ \n\ the\ path\ is\ less\ of\ limit\ than\ it\ will\ return\ true.\ \ If\ not\ if\ will\ return\ false.\ \ \n
comment11.params=
comment11.target=int\ whichExitD()
comment11.text=\n\ This\ method\ check\ which\ exit\ it\ is\ that\ the\ shortestpath\ has\ found.\ \ Because\ there\n\ can\ be\ multiple\ ends\ if\ it\ finds\ multiple\ ends\ within\ the\ shortestPaths,\ it\ will\n\ return\ the\ shorest\ of\ the\ shortest\ paths.\n
comment12.params=exit
comment12.target=int\ exitPath(int)
comment12.text=\n\ This\ method\ travereses\ throughout\ the\ shortest\ paths\ so\ I\ can\ be\ get\ the\ path\ to\n\ the\ shortestpath\ \n\ \n\ @param\ the\ exit\ to\ the\ shortest\ path\ \n
comment13.params=
comment13.target=java.lang.String\ getPlayerName()
comment14.params=
comment14.target=java.lang.String\ toString()
comment15.params=
comment15.target=int\ getWhereAt()
comment16.params=
comment16.target=int\ getWhereTo()
comment2.params=
comment2.target=void\ Dijkstra()
comment2.text=\n\ This\ method\ performs\ the\ Dijkstra's\ shortest\ path\ algorithm\ and\ my\ shortestPaths\n\ arraylist\ will\ contain\ all\ the\ node\ and\ the\ distance\ from\ my\ instance\ variable\n\ whereAt\ which\ will\ be\ the\ player's\ current\ location.\ \ Also\ in\ this\ algorithm\ I\n\ implemented\ a\ prev\ arraylist\ that\ allows\ me\ to\ traverse\ and\ keep\ track\ my\ way\ to\ \n\ each\ of\ the\ node\ in\ a\ shortet\ paths.\n
comment3.params=v
comment3.target=java.util.ArrayList\ neighbors(int)
comment3.text=\n\ This\ method\ returns\ an\ arraylist\ of\ neighbors\ of\ the\ node\ that\ is\ inputted\ through\n\ the\ parameter.\ \ \n\ \n\ @param\ integer\ Node\n\ @return\ arraylist\ of\ integers\ of\ all\ of\ the\ param's\ neighbors\n
comment4.params=v\ w
comment4.target=int\ weight(int,\ int)
comment4.text=\n\ This\ returns\ the\ cost\ or\ the\ weight\ from\ one\ node\ to\ another\ \n\ \n\ @param\ integer\ node\ from\ v,\ to\ w,\n\ @return\ an\ integer\ giving\ the\ cost\ from\ v\ to\ w\n
comment5.params=D
comment5.target=int\ minVertex(java.util.ArrayList)
comment5.text=\n\ Thie\ method\ has\ to\ mainly\ deal\ with\ my\ dijkstra's\ algorithm\ and\ wil\ return\ the\ shortest\n\ distance\ from\ the\ source\ that\ is\ not\ visted\ yet.\ \ Or\ that\ does\ not\ contain\ in\ my\n\ visited\ arraylist.\ \ \n\ \n\ @param\ all\ of\ the\ nodes\ in\ the\ shortestPath\ \n\ @return\ the\ shortest\ path\ from\ the\ source\ that\ is\ not\ visited\ yet\ \n
comment6.params=
comment6.target=java.util.ArrayList\ getShortestPaths()
comment7.params=diceRoll
comment7.target=void\ algorithm(int)
comment7.text=\n\ remains\ abstract\ as\ my\ players\ will\ have\ different\ algorithms\n
comment8.params=current
comment8.target=boolean\ checkForExitN(int)
comment8.text=\n\ This\ method\ check\ for\ a\ exit\ without\ the\ use\ of\ dikstras.\ \ Therefore\ will\ simply\ \n\ check\ for\ an\ exit\ if\ the\ end\ is\ an\ neighbor\ of\ the\ current\ node.\ \ \n\ \n\ @param\ the\ current\ node\ \n
comment9.params=current
comment9.target=int\ whichExitN(int)
comment9.text=\n\ This\ method\ find\ which\ exit\ it\ is\ in\ the\ current\ value's\ neighbors\ method.\ \ If\ \n\ the\ current\ value\ has\ multiple\ ends\ within\ it's\ neighbors\ that\ it\ will\ find\ the\ \n\ shortest\ one\ to\ the\ end\ within\ the\ neighbor\n\ \n\ @param\ current\ node\ \n
numComments=17
